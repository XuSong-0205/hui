#include "Parser.h"

namespace hui {

const std::map<TOKEN_TYPE, PRECEDENCE> OPER_PRECEDENCE{
	{TOKEN_TYPE::DOT, PRECEDENCE::DOT},

	{TOKEN_TYPE::NOT, PRECEDENCE::NOT},
	{TOKEN_TYPE::NEGATION, PRECEDENCE::NOT},

	{TOKEN_TYPE::MUL, PRECEDENCE::MUL},
	{TOKEN_TYPE::DIV, PRECEDENCE::MUL},
	{TOKEN_TYPE::REM, PRECEDENCE::MUL},

	{TOKEN_TYPE::ADD, PRECEDENCE::ADD},
	{TOKEN_TYPE::SUB, PRECEDENCE::ADD},

	{TOKEN_TYPE::LEFT_SHIFT, PRECEDENCE::LS},
	{TOKEN_TYPE::RIGHT_SHIFT, PRECEDENCE::LS},

	{TOKEN_TYPE::LT, PRECEDENCE::LT},
	{TOKEN_TYPE::LT_EQ, PRECEDENCE::LT},
	{TOKEN_TYPE::GT, PRECEDENCE::LT},
	{TOKEN_TYPE::GT_EQ, PRECEDENCE::LT},

	{TOKEN_TYPE::EQ, PRECEDENCE::EQ},
	{TOKEN_TYPE::NOT_EQ, PRECEDENCE::EQ},

	{TOKEN_TYPE::BIT_AND, PRECEDENCE::BIT_AND},

	{TOKEN_TYPE::XOR, PRECEDENCE::XOR},

	{TOKEN_TYPE::BIT_OR, PRECEDENCE::BIT_OR},

	{TOKEN_TYPE::AND, PRECEDENCE::AND},

	{TOKEN_TYPE::OR, PRECEDENCE::OR},

	{TOKEN_TYPE::ASSIGN, PRECEDENCE::ASSIGN},
	{TOKEN_TYPE::ADD_ASSIGN, PRECEDENCE::ASSIGN},
	{TOKEN_TYPE::SUB_ASSING, PRECEDENCE::ASSIGN},
	{TOKEN_TYPE::MUL_ASSIGN, PRECEDENCE::ASSIGN},
	{TOKEN_TYPE::DIV_ASSIGN, PRECEDENCE::ASSIGN},
	{TOKEN_TYPE::REM_ASSIGN, PRECEDENCE::ASSIGN},
	{TOKEN_TYPE::BIT_AND_ASSIGN, PRECEDENCE::ASSIGN},
	{TOKEN_TYPE::XOR_ASSIGN, PRECEDENCE::ASSIGN},
	{TOKEN_TYPE::BIT_OR_ASSIGN, PRECEDENCE::ASSIGN},
	{TOKEN_TYPE::LS_ASSIGN, PRECEDENCE::ASSIGN},
	{TOKEN_TYPE::RS_ASSIGN, PRECEDENCE::ASSIGN},

};

static PRECEDENCE get_oper_precedence(TOKEN_TYPE t1)
{
	auto it = OPER_PRECEDENCE.find(t1);
	if (it != OPER_PRECEDENCE.end()) {
		return it->second;
	}

	return PRECEDENCE::LOWEST;
}

static bool compare_oper_precedence(TOKEN_TYPE t1, TOKEN_TYPE t2)
{
	return get_oper_precedence(t1) < get_oper_precedence(t2);
}




}